name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: 11
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: front/package-lock.json

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Backend: Run tests with coverage
      - name: Run Backend Tests with Coverage
        working-directory: ./back
        run: |
          echo "Running backend tests with JaCoCo coverage..."
          mvn clean test jacoco:report

      # Frontend: Install dependencies and run tests
      - name: Install Frontend Dependencies
        working-directory: ./front
        run: npm ci

      - name: Run Frontend Tests with Coverage
        working-directory: ./front
        run: |
          echo "Running frontend tests with coverage..."
          npm test -- --watch=false --browsers=ChromeHeadless --code-coverage

      # Create sonar-project.properties for unified analysis
      - name: Create SonarQube Configuration
        run: |
          cat > sonar-project.properties << EOF
          # Project identification
          sonar.projectKey=lostmart_Gerez-un-projet-collaboratif-en-int-grant-une-demarche-CI-CD
          sonar.projectName=BobApp Full Stack
          sonar.projectVersion=1.0
          sonar.organization=lostmart

          # Source and test directories
          sonar.sources=back/src/main,front/src/app
          sonar.tests=back/src/test,front/src/app
          sonar.test.inclusions=**/*Test.java,**/*.spec.ts

          # Java configuration
          sonar.java.source=11
          sonar.java.binaries=back/target/classes
          sonar.java.libraries=back/target/dependency/*.jar

          # TypeScript/JavaScript configuration  
          sonar.typescript.node=node

          # Coverage reports
          sonar.java.coveragePlugin=jacoco
          sonar.coverage.jacoco.xmlReportPaths=back/target/site/jacoco/jacoco.xml
          sonar.javascript.lcov.reportPaths=front/coverage/lcov.info

          # Exclusions
          sonar.coverage.exclusions=**/*.spec.ts,**/*.module.ts,**/main.ts,**/polyfills.ts,**/*Test.java,**/test/**
          sonar.cpd.exclusions=**/*.spec.ts
          EOF

      # Unified SonarQube analysis
      - name: SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        run: |
          # Install SonarQube Scanner
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip -o sonar-scanner.zip
          export PATH=$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin

          # Run analysis
          sonar-scanner

      # Upload coverage reports as artifacts
      - name: Upload Backend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage-report
          path: back/target/site/jacoco/
          retention-days: 5

      - name: Upload Frontend Coverage
        uses: actions/upload-artifact@v4
        with:
          name: frontend-coverage-report
          path: front/coverage/
          retention-days: 5

      # Verify coverage files exist
      - name: Verify Coverage Reports
        run: |
          echo "=== Backend Coverage ==="
          if [ -f "back/target/site/jacoco/jacoco.xml" ]; then
            echo "✅ Backend coverage found"
            ls -la back/target/site/jacoco/
          else
            echo "❌ Backend coverage missing"
          fi

          echo "=== Frontend Coverage ==="
          if [ -f "front/coverage/lcov.info" ]; then
            echo "✅ Frontend coverage found"
            ls -la front/coverage/
          else
            echo "❌ Frontend coverage missing"
            find front -name "*coverage*" -type d -o -name "*.info" -type f | head -5
          fi
