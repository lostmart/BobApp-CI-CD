name: Docker Build and Deploy

on:
  workflow_run:
    workflows: ["Tests", "SonarQube"] # Wait for both workflows
    types: [completed]
    branches: [main]
  workflow_dispatch: # Manual trigger for testing

env:
  BACKEND_IMAGE: bobapp-backend
  FRONTEND_IMAGE: bobapp-frontend

jobs:
  check-prerequisites:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_run'
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}

    steps:
      - name: Check if all prerequisites passed
        id: check
        run: |
          if [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "✅ Prerequisites passed, proceeding with deployment"
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "❌ Prerequisites failed, skipping deployment"
          fi

  docker-build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [check-prerequisites]
    if: needs.check-prerequisites.outputs.should_deploy == 'true' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: front/package-lock.json

      - name: Validate Docker Hub Credentials
        run: |
          if [ -z "${{ secrets.DOCKER_HUB_USERNAME }}" ]; then
            echo "❌ DOCKER_HUB_USERNAME secret is not set!"
            echo "Please add your Docker Hub username to GitHub repository secrets"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_HUB_TOKEN }}" ]; then
            echo "❌ DOCKER_HUB_TOKEN secret is not set!"
            echo "Please add your Docker Hub access token to GitHub repository secrets"
            exit 1
          fi
          echo "✅ Docker Hub credentials are configured"
          echo "Docker Hub Username: ${{ secrets.DOCKER_HUB_USERNAME }}"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Backend Build and Deploy
      - name: Build Backend Application
        working-directory: ./back
        run: |
          echo "Building Spring Boot backend..."
          mvn clean package -DskipTests
          echo "Backend build completed"

      - name: Build and Push Backend Docker Image
        working-directory: ./back
        run: |
          echo "Building backend Docker image..."

          # Set timestamp once to avoid timing differences
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # Build image with latest tag first
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest .

          # Create additional tags from the same image
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest \
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest \
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:v${TIMESTAMP}

          echo "Pushing backend images to Docker Hub..."
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:v${TIMESTAMP}
          echo "Backend images pushed successfully!"

      # Frontend Build and Deploy
      - name: Build Frontend Application
        working-directory: ./front
        run: |
          echo "Installing frontend dependencies..."
          npm ci
          echo "Building Angular frontend..."
          npm run build:prod
          echo "Frontend build completed"

      - name: Build and Push Frontend Docker Image
        working-directory: ./front
        run: |
          echo "Building frontend Docker image..."

          # Set timestamp once to avoid timing differences
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)

          # Build image with latest tag first
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest .

          # Create additional tags from the same image
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest \
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest \
            ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:v${TIMESTAMP}

          echo "Pushing frontend images to Docker Hub..."
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:v${TIMESTAMP}
          echo "Frontend images pushed successfully!"

      - name: Docker Image Information
        run: |
          echo "## 🐳 Docker Images Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Images:" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run backend" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull and run frontend" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker run -p 4200:80 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Optional: Create a multi-arch build (supports both x86_64 and ARM64)
  docker-multiarch-build:
    name: Build Multi-Architecture Images
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main' && success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Backend Application
        working-directory: ./back
        run: mvn clean package -DskipTests

      - name: Build and Push Multi-Arch Backend
        working-directory: ./back
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:multiarch \
            --push .

      - name: Build Frontend Application
        working-directory: ./front
        run: |
          npm ci
          npm run build:prod

      - name: Build and Push Multi-Arch Frontend
        working-directory: ./front
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:multiarch \
            --push .

  # Optional: Security scan of the built images
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build-and-push
    if: github.ref == 'refs/heads/main' && success()
    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.BACKEND_IMAGE }}:latest"
          format: "sarif"
          output: "trivy-backend-results.sarif"

      - name: Upload Backend Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-backend-results.sarif"
          category: "backend-security"

      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ secrets.DOCKER_HUB_USERNAME }}/${{ env.FRONTEND_IMAGE }}:latest"
          format: "sarif"
          output: "trivy-frontend-results.sarif"

      - name: Upload Frontend Security Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-frontend-results.sarif"
          category: "frontend-security"
